package plugin;

import com.coderedrobotics.dashboard.communications.DSMListener;
import com.coderedrobotics.dashboard.communications.DataStream;
import com.coderedrobotics.dashboard.communications.DataStreamingModule;
import com.coderedrobotics.dashboard.communications.SynchronizedRegisterArray;
import java.awt.Color;

/**
 *
 * @author Austin
 */
public class Driver extends javax.swing.JPanel implements DSMListener {

    DataStreamingModule streamingModule;
    SynchronizedRegisterArray synchronizedRegisterArray;

    /**
     * Creates new form Driver
     */
    public Driver() {
        initComponents();
    }

    public void init(DataStreamingModule streamingModule,
            SynchronizedRegisterArray synchronizedRegisterArray) {
        this.streamingModule = streamingModule;
        this.synchronizedRegisterArray = synchronizedRegisterArray;
        streamingModule.addDSMListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        secondShooterSpeed = new com.coderedrobotics.dashboard.api.gui.Graph();
        firstShooterSpeed = new com.coderedrobotics.dashboard.api.gui.Graph();
        battery = new com.coderedrobotics.dashboard.api.gui.Graph();
        jLabel1 = new javax.swing.JLabel();
        compass1 = new com.coderedrobotics.dashboard.api.gui.Compass();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        shooterIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        gateIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        secondSetpoint = new javax.swing.JLabel();
        firstSetpoint = new javax.swing.JLabel();
        firstSpeed = new javax.swing.JLabel();
        secondSpeed = new javax.swing.JLabel();
        elevationIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        elevationPosition = new javax.swing.JLabel();
        elevationSetpoint = new javax.swing.JLabel();
        triggerIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        ejectorIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        threshold = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(940, 360));

        secondShooterSpeed.setPreferredSize(new java.awt.Dimension(200, 150));

        javax.swing.GroupLayout secondShooterSpeedLayout = new javax.swing.GroupLayout(secondShooterSpeed);
        secondShooterSpeed.setLayout(secondShooterSpeedLayout);
        secondShooterSpeedLayout.setHorizontalGroup(
            secondShooterSpeedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        secondShooterSpeedLayout.setVerticalGroup(
            secondShooterSpeedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        firstShooterSpeed.setPreferredSize(new java.awt.Dimension(200, 150));

        javax.swing.GroupLayout firstShooterSpeedLayout = new javax.swing.GroupLayout(firstShooterSpeed);
        firstShooterSpeed.setLayout(firstShooterSpeedLayout);
        firstShooterSpeedLayout.setHorizontalGroup(
            firstShooterSpeedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        firstShooterSpeedLayout.setVerticalGroup(
            firstShooterSpeedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        battery.setPreferredSize(new java.awt.Dimension(200, 150));

        javax.swing.GroupLayout batteryLayout = new javax.swing.GroupLayout(battery);
        battery.setLayout(batteryLayout);
        batteryLayout.setHorizontalGroup(
            batteryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );
        batteryLayout.setVerticalGroup(
            batteryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        jLabel1.setText("Threshold");

        javax.swing.GroupLayout compass1Layout = new javax.swing.GroupLayout(compass1);
        compass1.setLayout(compass1Layout);
        compass1Layout.setHorizontalGroup(
            compass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 267, Short.MAX_VALUE)
        );
        compass1Layout.setVerticalGroup(
            compass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 336, Short.MAX_VALUE)
        );

        jLabel2.setText("P fudge");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        secondSetpoint.setText("Setpoint 2: ");

        firstSetpoint.setText("Setpoint 1: ");

        firstSpeed.setText("Speed 1: ");

        secondSpeed.setText("Speed 2: ");

        elevationPosition.setText("Elevation pos:");

        elevationSetpoint.setText("Elevation setpoint:");

        threshold.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                thresholdKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(compass1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(secondShooterSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(battery, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(firstShooterSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gateIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(triggerIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ejectorIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(shooterIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(secondSetpoint)
                                    .addComponent(firstSetpoint)
                                    .addComponent(secondSpeed)
                                    .addComponent(firstSpeed)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(elevationIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(elevationPosition)
                                    .addComponent(elevationSetpoint))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(threshold, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(compass1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(threshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(secondSetpoint)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(firstSetpoint)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(secondSpeed)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(firstSpeed))
                                    .addComponent(shooterIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(elevationPosition)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(elevationSetpoint))
                                    .addComponent(elevationIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(secondShooterSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(battery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(firstShooterSpeed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(gateIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ejectorIndicator, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                .addComponent(triggerIndicator, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        synchronizedRegisterArray.setRegister("shooterPFudge",
                Double.parseDouble(threshold.getText()));
    }//GEN-LAST:event_jTextField1KeyReleased

    private void thresholdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_thresholdKeyReleased
        synchronizedRegisterArray.setRegister("shooterThreshold",
                Double.parseDouble(threshold.getText()));
    }//GEN-LAST:event_thresholdKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.coderedrobotics.dashboard.api.gui.Graph battery;
    private com.coderedrobotics.dashboard.api.gui.Compass compass1;
    private com.coderedrobotics.dashboard.api.gui.Indicator ejectorIndicator;
    private com.coderedrobotics.dashboard.api.gui.Indicator elevationIndicator;
    private javax.swing.JLabel elevationPosition;
    private javax.swing.JLabel elevationSetpoint;
    private javax.swing.JLabel firstSetpoint;
    private com.coderedrobotics.dashboard.api.gui.Graph firstShooterSpeed;
    private javax.swing.JLabel firstSpeed;
    private com.coderedrobotics.dashboard.api.gui.Indicator gateIndicator;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel secondSetpoint;
    private com.coderedrobotics.dashboard.api.gui.Graph secondShooterSpeed;
    private javax.swing.JLabel secondSpeed;
    private com.coderedrobotics.dashboard.api.gui.Indicator shooterIndicator;
    private javax.swing.JTextField threshold;
    private com.coderedrobotics.dashboard.api.gui.Indicator triggerIndicator;
    // End of variables declaration//GEN-END:variables

    @Override
    public void alertToDSMUpdates() {
        DataStream stream;
        stream = streamingModule.getStream("gyroAngle");
        if (stream != null) {
            compass1.setAngle(stream.getLastPacket().val % 360);
        }
        stream = streamingModule.getStream("gateState");
        if (stream != null) {
            gateIndicator.setState(stream.getLastPacket().val == 1);
        }
        stream = streamingModule.getStream("triggerState");
        if (stream != null) {
            triggerIndicator.setState(stream.getLastPacket().val == 1);
        }
        stream = streamingModule.getStream("ejectorState");
        if (stream != null) {
            ejectorIndicator.setState(stream.getLastPacket().val == 1);
        }
        stream = streamingModule.getStream("secondSetpoint");
        if (stream != null) {
            secondSetpoint.setText("Setpoint 2: " + stream.getLastPacket().val);
        }
        stream = streamingModule.getStream("firstSetpoint");
        if (stream != null) {
            firstSetpoint.setText("Setpoint 1: " + stream.getLastPacket().val);
        }
        stream = streamingModule.getStream("secondSpeed");
        if (stream != null) {
            secondSpeed.setText("Speed 2: " + stream.getLastPacket().val);
        }
        stream = streamingModule.getStream("firstSpeed");
        if (stream != null) {
            firstSpeed.setText("Speed 1: " + stream.getLastPacket().val);
        }
        stream = streamingModule.getStream("elevationPosition");
        if (stream != null) {
            elevationPosition.setText(
                    "Elevation position: " + stream.getLastPacket().val);
        }
        stream = streamingModule.getStream("elevationSetpoint");
        if (stream != null) {
            elevationSetpoint.setText(
                    "Elevation setpoint: " + stream.getLastPacket().val);
        }
    }

    @Override
    public void alertToNewStreams() {
        DataStream stream;
        //second wheel
        secondShooterSpeed.removeAllStreams();
        stream = streamingModule.getStream("secondError");
        if (stream != null) {
            secondShooterSpeed.addStream(stream, Color.RED, 0.5, 1, true);
        }
        stream = streamingModule.getStream("threshold");
        if (stream != null) {
            secondShooterSpeed.addStream(stream, Color.ORANGE, 0.5, 1, false);
        }
        stream = streamingModule.getStream("secondFilteredError");
        if (stream != null) {
            secondShooterSpeed.addStream(stream, Color.MAGENTA, 0.5, 1, false);
        }
        stream = streamingModule.getStream("secondSpeed");
        if (stream != null) {
            secondShooterSpeed.addStream(stream, Color.GREEN, 0, 0.05, false);
        }
        stream = streamingModule.getStream("secondSetpoint");
        if (stream != null) {
            secondShooterSpeed.addStream(stream, Color.CYAN, 0, 0.05, false);
        }
        //first wheel
        firstShooterSpeed.removeAllStreams();
        stream = streamingModule.getStream("firstError");
        if (stream != null) {
            firstShooterSpeed.addStream(stream, Color.RED, 0.5, 1, true);
        }
        stream = streamingModule.getStream("threshold");
        if (stream != null) {
            firstShooterSpeed.addStream(stream, Color.ORANGE, 0.5, 1, false);
        }
        stream = streamingModule.getStream("firstFilteredError");
        if (stream != null) {
            firstShooterSpeed.addStream(stream, Color.MAGENTA, 0.5, 1, false);
        }
        stream = streamingModule.getStream("firstSpeed");
        if (stream != null) {
            firstShooterSpeed.addStream(stream, Color.GREEN, 0, 0.05, false);
        }
        stream = streamingModule.getStream("firstSetpoint");
        if (stream != null) {
            firstShooterSpeed.addStream(stream, Color.CYAN, 0, 0.05, false);
        }
        //battery
        battery.removeAllStreams();
        stream = streamingModule.getStream("batteryVoltage");
        if (stream != null) {
            battery.addStream(stream, Color.BLUE, 0, 0.066667, false);
        }
    }
}
