package plugin;

import com.coderedrobotics.dashboard.communications.DataStreamingModule;
import com.coderedrobotics.dashboard.communications.SRAListener;
import com.coderedrobotics.dashboard.communications.SynchronizedRegisterArray;

/**
 *
 * @author Austin
 */
public class Calibration extends javax.swing.JPanel implements SRAListener {

    DataStreamingModule streamingModule;
    SynchronizedRegisterArray sra;

    /**
     * Creates new form Driver
     */
    public Calibration() {
        initComponents();
    }

    public void init(SynchronizedRegisterArray syncModule) {
        this.sra = syncModule;
        syncModule.addSRAListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        hardCodedPanel = new javax.swing.JPanel();
        retractedLimitLabel = new javax.swing.JLabel();
        clearLimitLabel = new javax.swing.JLabel();
        extendedLimitLabel = new javax.swing.JLabel();
        extendedSetpointLabel = new javax.swing.JLabel();
        retractedSetpointLabel = new javax.swing.JLabel();
        currentCalibration = new javax.swing.JPanel();
        retractedLimitLabel2 = new javax.swing.JLabel();
        clearLimitLabel2 = new javax.swing.JLabel();
        extendedLimitLabel2 = new javax.swing.JLabel();
        extendedSetpointLabel2 = new javax.swing.JLabel();
        retractedSetpointLabel2 = new javax.swing.JLabel();
        pickupResetButton = new javax.swing.JButton();
        pickupEnableCalibrationModeButton = new javax.swing.JCheckBox();
        setRetractedLimit = new javax.swing.JButton();
        setExtendedLimit = new javax.swing.JButton();
        setClearLimit = new javax.swing.JButton();
        setExtendedSetpoint = new javax.swing.JButton();
        setRetractedSetpoint = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        hardCodedPanel1 = new javax.swing.JPanel();
        petalsLOuter = new javax.swing.JLabel();
        petalsLInner = new javax.swing.JLabel();
        petalsROuter = new javax.swing.JLabel();
        petalsRInner = new javax.swing.JLabel();
        currentCalibration1 = new javax.swing.JPanel();
        petalsLOuter2 = new javax.swing.JLabel();
        petalsLInner2 = new javax.swing.JLabel();
        petalsROuter2 = new javax.swing.JLabel();
        petalsRInner2 = new javax.swing.JLabel();
        petalsEnableCalibrationModeButton = new javax.swing.JCheckBox();
        petalsResetButton = new javax.swing.JButton();
        setLOuter = new javax.swing.JButton();
        setLInner = new javax.swing.JButton();
        setROuter = new javax.swing.JButton();
        setRInner = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(940, 360));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Pickup"));

        hardCodedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Hardcoded Calibration"));

        retractedLimitLabel.setText("[Retracted Limit]");

        clearLimitLabel.setText("[Clear Limit]");

        extendedLimitLabel.setText("[Extended Limit]");

        extendedSetpointLabel.setText("[Extended Setpoint]");

        retractedSetpointLabel.setText("[Retracted Setpoint]");

        javax.swing.GroupLayout hardCodedPanelLayout = new javax.swing.GroupLayout(hardCodedPanel);
        hardCodedPanel.setLayout(hardCodedPanelLayout);
        hardCodedPanelLayout.setHorizontalGroup(
            hardCodedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(retractedSetpointLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
            .addComponent(extendedSetpointLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(extendedLimitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(clearLimitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(retractedLimitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        hardCodedPanelLayout.setVerticalGroup(
            hardCodedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hardCodedPanelLayout.createSequentialGroup()
                .addComponent(retractedLimitLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearLimitLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extendedLimitLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extendedSetpointLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(retractedSetpointLabel))
        );

        currentCalibration.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Calibration"));

        retractedLimitLabel2.setText("[Retracted Limit]");

        clearLimitLabel2.setText("[Clear Limit]");

        extendedLimitLabel2.setText("[Extended Limit]");

        extendedSetpointLabel2.setText("[Extended Setpoint]");

        retractedSetpointLabel2.setText("[Retracted Setpoint]");

        javax.swing.GroupLayout currentCalibrationLayout = new javax.swing.GroupLayout(currentCalibration);
        currentCalibration.setLayout(currentCalibrationLayout);
        currentCalibrationLayout.setHorizontalGroup(
            currentCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(retractedLimitLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(clearLimitLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(extendedLimitLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(extendedSetpointLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(retractedSetpointLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
        );
        currentCalibrationLayout.setVerticalGroup(
            currentCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentCalibrationLayout.createSequentialGroup()
                .addComponent(retractedLimitLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearLimitLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extendedLimitLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extendedSetpointLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(retractedSetpointLabel2))
        );

        pickupResetButton.setText("RESET");
        pickupResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickupResetButtonActionPerformed(evt);
            }
        });

        pickupEnableCalibrationModeButton.setText("Enable Calibration Mode");
        pickupEnableCalibrationModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickupEnableCalibrationModeButtonActionPerformed(evt);
            }
        });

        setRetractedLimit.setText("Set Retracted Limit to Current Pot Position");
        setRetractedLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setRetractedLimitActionPerformed(evt);
            }
        });

        setExtendedLimit.setText("Set Extended Limit to Current Pot Position");
        setExtendedLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setExtendedLimitActionPerformed(evt);
            }
        });

        setClearLimit.setText("Set Clear Limit to Current Pot Position");
        setClearLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setClearLimitActionPerformed(evt);
            }
        });

        setExtendedSetpoint.setText("Set Extended Setpoint to Current Pot Position");
        setExtendedSetpoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setExtendedSetpointActionPerformed(evt);
            }
        });

        setRetractedSetpoint.setText("Set Retracted Setpoint to Current Pot Position");
        setRetractedSetpoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setRetractedSetpointActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(pickupEnableCalibrationModeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pickupResetButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(hardCodedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentCalibration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(setRetractedLimit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setClearLimit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setExtendedSetpoint, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setRetractedSetpoint, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setExtendedLimit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hardCodedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentCalibration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pickupResetButton)
                    .addComponent(pickupEnableCalibrationModeButton))
                .addGap(18, 18, 18)
                .addComponent(setRetractedLimit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setExtendedLimit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setClearLimit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setExtendedSetpoint)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setRetractedSetpoint)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Petals"));

        hardCodedPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Hardcoded Calibration"));

        petalsLOuter.setText("[Left Outer Limit]");

        petalsLInner.setText("[Left Inner Limit]");

        petalsROuter.setText("[Right Outer Limit]");

        petalsRInner.setText("[Right Inner Limit]");

        javax.swing.GroupLayout hardCodedPanel1Layout = new javax.swing.GroupLayout(hardCodedPanel1);
        hardCodedPanel1.setLayout(hardCodedPanel1Layout);
        hardCodedPanel1Layout.setHorizontalGroup(
            hardCodedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(petalsRInner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(petalsROuter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(petalsLInner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(petalsLOuter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        hardCodedPanel1Layout.setVerticalGroup(
            hardCodedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hardCodedPanel1Layout.createSequentialGroup()
                .addComponent(petalsLOuter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(petalsLInner)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(petalsROuter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(petalsRInner, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        currentCalibration1.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Calibration"));

        petalsLOuter2.setText("[Left Outer Limit]");

        petalsLInner2.setText("[Left Inner Limit]");

        petalsROuter2.setText("[Right Outer Limit]");

        petalsRInner2.setText("[Right Inner Limit]");

        javax.swing.GroupLayout currentCalibration1Layout = new javax.swing.GroupLayout(currentCalibration1);
        currentCalibration1.setLayout(currentCalibration1Layout);
        currentCalibration1Layout.setHorizontalGroup(
            currentCalibration1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(petalsLOuter2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(petalsLInner2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(petalsROuter2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(petalsRInner2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        currentCalibration1Layout.setVerticalGroup(
            currentCalibration1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentCalibration1Layout.createSequentialGroup()
                .addComponent(petalsLOuter2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(petalsLInner2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(petalsROuter2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(petalsRInner2))
        );

        petalsEnableCalibrationModeButton.setText("Enable Calibration Mode");
        petalsEnableCalibrationModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petalsEnableCalibrationModeButtonActionPerformed(evt);
            }
        });

        petalsResetButton.setText("RESET");
        petalsResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petalsResetButtonActionPerformed(evt);
            }
        });

        setLOuter.setText("Set Left Outer Limit to Current Pot Position");
        setLOuter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLOuterActionPerformed(evt);
            }
        });

        setLInner.setText("Set Left Inner Limit to Current Pot Position");
        setLInner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLInnerActionPerformed(evt);
            }
        });

        setROuter.setText("Set Right Outer Limit to Current Pot Position");
        setROuter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setROuterActionPerformed(evt);
            }
        });

        setRInner.setText("Set Right Inner Limit to Current Pot Position");
        setRInner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setRInnerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hardCodedPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(currentCalibration1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(petalsEnableCalibrationModeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(petalsResetButton))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(setLOuter, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setROuter, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setRInner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setLInner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(hardCodedPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentCalibration1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(petalsResetButton)
                    .addComponent(petalsEnableCalibrationModeButton))
                .addGap(18, 18, 18)
                .addComponent(setLOuter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setLInner)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setROuter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setRInner)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setRetractedLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setRetractedLimitActionPerformed
        sra.setRegister("pickup-retractedPosition", -1);
    }//GEN-LAST:event_setRetractedLimitActionPerformed

    private void setExtendedLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setExtendedLimitActionPerformed
        sra.setRegister("pickup-extendedPosition", -1);
    }//GEN-LAST:event_setExtendedLimitActionPerformed

    private void setClearLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setClearLimitActionPerformed
        sra.setRegister("pickup-clearPosition", -1);
    }//GEN-LAST:event_setClearLimitActionPerformed

    private void setExtendedSetpointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setExtendedSetpointActionPerformed
        sra.setRegister("pickup-extendedSetpoint", -1);
    }//GEN-LAST:event_setExtendedSetpointActionPerformed

    private void setRetractedSetpointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setRetractedSetpointActionPerformed
        sra.setRegister("pickup-retractedSetpoint", -1);
    }//GEN-LAST:event_setRetractedSetpointActionPerformed

    private void pickupResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickupResetButtonActionPerformed
        sra.setRegister("pickup-reset", 1);
    }//GEN-LAST:event_pickupResetButtonActionPerformed

    private void pickupEnableCalibrationModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickupEnableCalibrationModeButtonActionPerformed
        sra.setRegister("pickup-disableCalibration", pickupEnableCalibrationModeButton.isSelected() ? 1 : 0);
    }//GEN-LAST:event_pickupEnableCalibrationModeButtonActionPerformed

    private void petalsEnableCalibrationModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petalsEnableCalibrationModeButtonActionPerformed
        sra.setRegister("petals-disableCalibration", pickupEnableCalibrationModeButton.isSelected() ? 1 : 0);
    }//GEN-LAST:event_petalsEnableCalibrationModeButtonActionPerformed

    private void petalsResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petalsResetButtonActionPerformed
        sra.setRegister("petals-reset", 1);
    }//GEN-LAST:event_petalsResetButtonActionPerformed

    private void setLOuterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setLOuterActionPerformed
        sra.setRegister("petals-LOuter", -1);
    }//GEN-LAST:event_setLOuterActionPerformed

    private void setLInnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setLInnerActionPerformed
        sra.setRegister("petals-LInner", -1);
    }//GEN-LAST:event_setLInnerActionPerformed

    private void setROuterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setROuterActionPerformed
        sra.setRegister("petals-ROuter", -1);
    }//GEN-LAST:event_setROuterActionPerformed

    private void setRInnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setRInnerActionPerformed
        sra.setRegister("petals-RInner", -1);
    }//GEN-LAST:event_setRInnerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clearLimitLabel;
    private javax.swing.JLabel clearLimitLabel2;
    private javax.swing.JPanel currentCalibration;
    private javax.swing.JPanel currentCalibration1;
    private javax.swing.JLabel extendedLimitLabel;
    private javax.swing.JLabel extendedLimitLabel2;
    private javax.swing.JLabel extendedSetpointLabel;
    private javax.swing.JLabel extendedSetpointLabel2;
    private javax.swing.JPanel hardCodedPanel;
    private javax.swing.JPanel hardCodedPanel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JCheckBox petalsEnableCalibrationModeButton;
    private javax.swing.JLabel petalsLInner;
    private javax.swing.JLabel petalsLInner2;
    private javax.swing.JLabel petalsLOuter;
    private javax.swing.JLabel petalsLOuter2;
    private javax.swing.JLabel petalsRInner;
    private javax.swing.JLabel petalsRInner2;
    private javax.swing.JLabel petalsROuter;
    private javax.swing.JLabel petalsROuter2;
    private javax.swing.JButton petalsResetButton;
    private javax.swing.JCheckBox pickupEnableCalibrationModeButton;
    private javax.swing.JButton pickupResetButton;
    private javax.swing.JLabel retractedLimitLabel;
    private javax.swing.JLabel retractedLimitLabel2;
    private javax.swing.JLabel retractedSetpointLabel;
    private javax.swing.JLabel retractedSetpointLabel2;
    private javax.swing.JButton setClearLimit;
    private javax.swing.JButton setExtendedLimit;
    private javax.swing.JButton setExtendedSetpoint;
    private javax.swing.JButton setLInner;
    private javax.swing.JButton setLOuter;
    private javax.swing.JButton setRInner;
    private javax.swing.JButton setROuter;
    private javax.swing.JButton setRetractedLimit;
    private javax.swing.JButton setRetractedSetpoint;
    // End of variables declaration//GEN-END:variables

    @Override
    public void alertToSRAUpdates() {
        retractedLimitLabel2.setText("Retracted Limit: " + sra.get("pickup-retractedPosition"));
        clearLimitLabel2.setText("Clear Limit: " + sra.get("pickup-clearPosition"));
        extendedLimitLabel2.setText("Extended Limit: " + sra.get("pickup-extendedPosition"));
        extendedSetpointLabel2.setText("Extended Setpoint: " + sra.get("pickup-extendedSetpoint"));
        retractedSetpointLabel2.setText("Retracted Setpoint: " + sra.get("pickup-retractedSetpoint"));

        if (sra.get("pickup-retractedPosition") != 0 && "[Retracted Limit]".equals(retractedLimitLabel.getText())) {
            retractedLimitLabel.setText("Retracted Limit: " + sra.get("pickup-retractedPosition"));
        }
        if (sra.get("pickup-clearPosition") != 0 && "[Clear Limit]".equals(clearLimitLabel.getText())) {
            clearLimitLabel.setText("Clear Limit: " + sra.get("pickup-clearPosition"));
        }
        if (sra.get("pickup-extendedPosition") != 0 && "[Extended Limit]".equals(extendedLimitLabel.getText())) {
            extendedLimitLabel.setText("Extended Limit: " + sra.get("pickup-extendedPosition"));
        }
        if (sra.get("pickup-extendedSetpoint") != 0 && "[Extended Setpoint]".equals(extendedSetpointLabel.getText())) {
            extendedSetpointLabel.setText("Extended Setpoint: " + sra.get("pickup-extendedSetpoint"));
        }
        if (sra.get("pickup-retractedSetpoint") != 0 && "[Retracted Setpoint]".equals(retractedSetpointLabel.getText())) {
            retractedSetpointLabel.setText("Retracted Setpoint: " + sra.get("pickup-retractedSetpoint"));
        }

        petalsLOuter2.setText("Left Outer Limit: " + sra.get("petals-LOuter"));
        petalsLOuter2.setText("Left Inner Limit: " + sra.get("petals-LInner"));
        petalsLOuter2.setText("Right Outer Limit: " + sra.get("petals-ROuter"));
        petalsLOuter2.setText("Right Inner Limit: " + sra.get("petals-RInner"));

        if (sra.get("petals-LOuter") != 0 && "[Left Outer Limit]".equals(petalsLOuter.getText())) {
            petalsLOuter.setText("Left Outer Limit: " + sra.get("petals-LOuter"));
        }
        if (sra.get("petals-LInner") != 0 && "[Left Inner Limit]".equals(petalsLInner.getText())) {
            petalsLInner.setText("Left Inner Limit: " + sra.get("petals-LInner"));
        }
        if (sra.get("petals-ROuter") != 0 && "[Right Outer Limit]".equals(petalsROuter.getText())) {
            petalsROuter.setText("Right Outer Limit: " + sra.get("petals-ROuter"));
        }
        if (sra.get("petals-RInner") != 0 && "[Right Inner Setpoint]".equals(petalsRInner.getText())) {
            petalsRInner.setText("Right Inner Setpoint: " + sra.get("petals-RInner"));
        }
    }
}
