package plugin;

import com.coderedrobotics.dashboard.communications.DSMListener;
import com.coderedrobotics.dashboard.communications.DataStream;
import com.coderedrobotics.dashboard.communications.DataStreamingModule;
import com.coderedrobotics.dashboard.communications.SynchronizedRegisterArray;
import java.awt.Color;

/**
 *
 * @author Austin
 */
public class Driver extends javax.swing.JPanel implements DSMListener {

    DataStreamingModule streamingModule;
    SynchronizedRegisterArray synchronizedRegisterArray;

    double lowestBattery = 20;

    /**
     * Creates new form Driver
     */
    public Driver() {
        initComponents();
    }

    public void init(DataStreamingModule streamingModule,
            SynchronizedRegisterArray synchronizedRegisterArray) {
        this.streamingModule = streamingModule;
        this.synchronizedRegisterArray = synchronizedRegisterArray;
        streamingModule.addDSMListener(this);
        hallEncodersIndicator.setState(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        compassPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pickupAngle = new com.coderedrobotics.dashboard.api.gui.Compass();
        infoPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cockingIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        stringPotIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        petalsMovingIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        pickupInfoPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        pickupMovingIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        jLabel9 = new javax.swing.JLabel();
        pickupWheelsIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        robotInfoPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        batteryIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        jLabel8 = new javax.swing.JLabel();
        singleControllerModeIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        batteryGraph = new com.coderedrobotics.dashboard.api.gui.Graph();
        hallEncodersIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        shootingInfoPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        pickupReadyIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        jLabel11 = new javax.swing.JLabel();
        petalsReadyIndicator = new com.coderedrobotics.dashboard.api.gui.Indicator();
        jLabel12 = new javax.swing.JLabel();
        cockedIndictor = new com.coderedrobotics.dashboard.api.gui.Indicator();

        setPreferredSize(new java.awt.Dimension(940, 360));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pickup Angle");

        javax.swing.GroupLayout pickupAngleLayout = new javax.swing.GroupLayout(pickupAngle);
        pickupAngle.setLayout(pickupAngleLayout);
        pickupAngleLayout.setHorizontalGroup(
            pickupAngleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        pickupAngleLayout.setVerticalGroup(
            pickupAngleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout compassPanelLayout = new javax.swing.GroupLayout(compassPanel);
        compassPanel.setLayout(compassPanelLayout);
        compassPanelLayout.setHorizontalGroup(
            compassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pickupAngle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        compassPanelLayout.setVerticalGroup(
            compassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compassPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pickupAngle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        infoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Info"));

        jLabel3.setText("Cocking");

        jLabel4.setText("Petals Moving");

        jLabel5.setText("String Pot");

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(petalsMovingIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cockingIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stringPotIndicator, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel3))
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cockingIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(petalsMovingIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stringPotIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pickupInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Pickup Info"));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Pickup Wheels");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Pickup Moving");

        javax.swing.GroupLayout pickupInfoPanelLayout = new javax.swing.GroupLayout(pickupInfoPanel);
        pickupInfoPanel.setLayout(pickupInfoPanelLayout);
        pickupInfoPanelLayout.setHorizontalGroup(
            pickupInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pickupInfoPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pickupInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pickupMovingIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pickupWheelsIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                .addGap(22, 22, 22))
        );
        pickupInfoPanelLayout.setVerticalGroup(
            pickupInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pickupInfoPanelLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pickupWheelsIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pickupMovingIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        robotInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Robot Info"));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Single Controller Mode");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Hall Encoders");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Battery");

        javax.swing.GroupLayout batteryGraphLayout = new javax.swing.GroupLayout(batteryGraph);
        batteryGraph.setLayout(batteryGraphLayout);
        batteryGraphLayout.setHorizontalGroup(
            batteryGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        batteryGraphLayout.setVerticalGroup(
            batteryGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout robotInfoPanelLayout = new javax.swing.GroupLayout(robotInfoPanel);
        robotInfoPanel.setLayout(robotInfoPanelLayout);
        robotInfoPanelLayout.setHorizontalGroup(
            robotInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(robotInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(robotInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(singleControllerModeIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hallEncodersIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(robotInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(robotInfoPanelLayout.createSequentialGroup()
                        .addComponent(batteryIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(batteryGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        robotInfoPanelLayout.setVerticalGroup(
            robotInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(robotInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(robotInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8))
                .addGap(7, 7, 7)
                .addGroup(robotInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(robotInfoPanelLayout.createSequentialGroup()
                        .addComponent(singleControllerModeIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(hallEncodersIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(batteryIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(batteryGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        shootingInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Shooting Info"));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Pickup Ready");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Petals Ready");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("COCKED");

        javax.swing.GroupLayout shootingInfoPanelLayout = new javax.swing.GroupLayout(shootingInfoPanel);
        shootingInfoPanel.setLayout(shootingInfoPanelLayout);
        shootingInfoPanelLayout.setHorizontalGroup(
            shootingInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, shootingInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(shootingInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(petalsReadyIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pickupReadyIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(shootingInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cockedIndictor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        shootingInfoPanelLayout.setVerticalGroup(
            shootingInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shootingInfoPanelLayout.createSequentialGroup()
                .addGroup(shootingInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(shootingInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shootingInfoPanelLayout.createSequentialGroup()
                        .addComponent(pickupReadyIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(petalsReadyIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cockedIndictor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(compassPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pickupInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shootingInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(robotInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(compassPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(robotInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pickupInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(shootingInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.coderedrobotics.dashboard.api.gui.Graph batteryGraph;
    private com.coderedrobotics.dashboard.api.gui.Indicator batteryIndicator;
    private com.coderedrobotics.dashboard.api.gui.Indicator cockedIndictor;
    private com.coderedrobotics.dashboard.api.gui.Indicator cockingIndicator;
    private javax.swing.JPanel compassPanel;
    private com.coderedrobotics.dashboard.api.gui.Indicator hallEncodersIndicator;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private com.coderedrobotics.dashboard.api.gui.Indicator petalsMovingIndicator;
    private com.coderedrobotics.dashboard.api.gui.Indicator petalsReadyIndicator;
    private com.coderedrobotics.dashboard.api.gui.Compass pickupAngle;
    private javax.swing.JPanel pickupInfoPanel;
    private com.coderedrobotics.dashboard.api.gui.Indicator pickupMovingIndicator;
    private com.coderedrobotics.dashboard.api.gui.Indicator pickupReadyIndicator;
    private com.coderedrobotics.dashboard.api.gui.Indicator pickupWheelsIndicator;
    private javax.swing.JPanel robotInfoPanel;
    private javax.swing.JPanel shootingInfoPanel;
    private com.coderedrobotics.dashboard.api.gui.Indicator singleControllerModeIndicator;
    private com.coderedrobotics.dashboard.api.gui.Indicator stringPotIndicator;
    // End of variables declaration//GEN-END:variables

    @Override
    public void alertToDSMUpdates() {
        DataStream stream;
        stream = streamingModule.getStream("batteryVoltage");
        if (stream != null) {
            double val = stream.getLastPacket().val;
            if (val < lowestBattery) {
                lowestBattery = val;
            }
            if (lowestBattery < 8) {
                batteryIndicator.setState(false);
            } else {
                batteryIndicator.setState(true);
            }
        }

        stream = streamingModule.getStream("singleController");
        if (stream != null) {
            singleControllerModeIndicator.setState((stream.getLastPacket().val == 1));
        }

        stream = streamingModule.getStream("hallEncoder");
        if (stream != null) {
            hallEncodersIndicator.setState((stream.getLastPacket().val == 1));
        }

        stream = streamingModule.getStream("pickupWheels");
        if (stream != null) {
            pickupWheelsIndicator.setState(stream.getLastPacket().val != 0);
            pickupWheelsIndicator.setText(stream.getLastPacket().val >= 0 ? "out" : "in");
        }
        
        stream = streamingModule.getStream("pickupMoving");
        if (stream != null) {
            pickupMovingIndicator.setState(stream.getLastPacket().val != 0);
            pickupMovingIndicator.setText(stream.getLastPacket().val >= 0 ? "forward" : "reverse");
        }

        stream = streamingModule.getStream("pickupAngle");
        if (stream != null) {
            pickupAngle.setAngle(stream.getLastPacket().val);
        }

        stream = streamingModule.getStream("cockingStatus");
        if (stream != null) {
            cockingIndicator.setState(stream.getLastPacket().val == 1);
        }
        
        stream = streamingModule.getStream("petalsMoving");
        if (stream != null) {
            petalsMovingIndicator.setState(stream.getLastPacket().val == 1);
        }
        
        stream = streamingModule.getStream("stringPot");
        if (stream != null) {
            stringPotIndicator.setState(stream.getLastPacket().val == 1);
        }
        
        stream = streamingModule.getStream("pickupReady");
        if (stream != null) {
            pickupReadyIndicator.setState(stream.getLastPacket().val == 1);
        }
        
        stream = streamingModule.getStream("petalsReady");
        if (stream != null) {
            petalsReadyIndicator.setState(stream.getLastPacket().val == 1);
        }
        
        stream = streamingModule.getStream("cocked");
        if (stream != null) {
            cockedIndictor.setState(stream.getLastPacket().val == 1);
        }
    }

    @Override
    public void alertToNewStreams() {

        DataStream stream;
        batteryGraph.removeAllStreams();
        stream = streamingModule.getStream("batteryVoltage");
        System.out.println(stream == null);
        if (stream != null) {
            batteryGraph.addStream(stream, Color.BLUE, 0, 0.066667, false);
        }
    }

//        stream = streamingModule.getStream("gyroAngle");
//        if (stream != null) {
//            compass1.setAngle(stream.getLastPacket().val % 360);
//        }
//        stream = streamingModule.getStream("gateState");
//        if (stream != null) {
//            gateIndicator.setState(stream.getLastPacket().val == 1);
//        }
//        stream = streamingModule.getStream("triggerState");
//        if (stream != null) {
//            triggerIndicator.setState(stream.getLastPacket().val == 1);
//        }
//        stream = streamingModule.getStream("ejectorState");
//        if (stream != null) {
//            ejectorIndicator.setState(stream.getLastPacket().val == 1);
//        }
//        stream = streamingModule.getStream("secondSetpoint");
//        if (stream != null) {
//            secondSetpoint.setText("Setpoint 2: " + stream.getLastPacket().val);
//        }
//        stream = streamingModule.getStream("firstSetpoint");
//        if (stream != null) {
//            firstSetpoint.setText("Setpoint 1: " + stream.getLastPacket().val);
//        }
//        stream = streamingModule.getStream("secondSpeed");
//        if (stream != null) {
//            secondSpeed.setText("Speed 2: " + stream.getLastPacket().val);
//        }
//        stream = streamingModule.getStream("firstSpeed");
//        if (stream != null) {
//            firstSpeed.setText("Speed 1: " + stream.getLastPacket().val);
//        }
//        stream = streamingModule.getStream("elevationPosition");
//        if (stream != null) {
//            elevationPosition.setText(
//                    "Elevation position: " + stream.getLastPacket().val);
//        }
//        stream = streamingModule.getStream("elevationSetpoint");
//        if (stream != null) {
//            elevationSetpoint.setText(
//                    "Elevation setpoint: " + stream.getLastPacket().val);
//        }
}
