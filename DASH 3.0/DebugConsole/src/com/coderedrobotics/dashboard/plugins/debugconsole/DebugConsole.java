package com.coderedrobotics.dashboard.plugins.debugconsole;

import com.coderedrobotics.dashboard.communications.Connection;
import com.coderedrobotics.dashboard.communications.PrimitiveSerializer;
import com.coderedrobotics.dashboard.communications.Subsocket;
import com.coderedrobotics.dashboard.communications.exceptions.InvalidRouteException;
import com.coderedrobotics.dashboard.communications.exceptions.NotMultiplexedException;
import com.coderedrobotics.dashboard.communications.listeners.SubsocketListener;
import java.awt.Color;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Michael
 */
public class DebugConsole extends javax.swing.JPanel implements SubsocketListener {

    Subsocket base;
    Subsocket root;
    ArrayList<Subsocket> consoleStreams;
    Color[] colors = {Color.BLACK, Color.BLUE, Color.GREEN, Color.RED, Color.ORANGE,
        Color.MAGENTA, Color.PINK, Color.CYAN, Color.LIGHT_GRAY};
    Options options;

    /**
     * Creates new form DebugConsole
     */
    public DebugConsole(Options options) {
        initComponents();
        consoleStreams = new ArrayList<>();
        this.options = options;
        try {
            root = Connection.getInstance().getRootSubsocket();
            base = root.enableMultiplexing().createNewRoute("root.debugconsole").enableMultiplexing();
            base.addListener(this);
        } catch (NotMultiplexedException | InvalidRouteException ex) {
            Logger.getLogger(DebugConsole.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void incomingData(byte[] data, Subsocket subsocket) {
        if (subsocket == base) {
            try {
                String route = PrimitiveSerializer.bytesToString(data);
                System.out.println("ON BASE: " + route);
                Subsocket ss = root.getSubsocket(route);
                ss.addListener(this);
                consoleStreams.add(ss);
                String nodenames[] = route.split("\\.");
                String node = nodenames[nodenames.length - 1];
                options.addStream(node);
            } catch (InvalidRouteException ex) {
                Logger.getLogger(DebugConsole.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String nodenames[] = subsocket.mapCompleteRoute().split("\\.");
            String node = nodenames[nodenames.length - 1];
            if (consoleStreams.contains(subsocket) && options.isStreamEnabled(node)) {
                appendMessage("[" + node + "] " + PrimitiveSerializer.bytesToString(data),
                        colors[wrapIndex(consoleStreams.indexOf(subsocket))]);
            }
        }
    }

    private int wrapIndex(int i) {
        return i % colors.length;
    }

    private void appendMessage(String message, Color color) {
        StyledDocument doc = jTextPane1.getStyledDocument();
        SimpleAttributeSet keyWord = new SimpleAttributeSet();
        StyleConstants.setForeground(keyWord, color);
        StyleConstants.setBold(keyWord, true);
        try {
            doc.insertString(doc.getLength(), message + "\n", keyWord);
            jTextPane1.setCaretPosition(jTextPane1.getDocument().getLength());
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        jTextPane1.setEditable(false);
        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 739, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
