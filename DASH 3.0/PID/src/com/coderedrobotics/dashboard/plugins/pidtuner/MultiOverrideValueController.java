package com.coderedrobotics.dashboard.plugins.pidtuner;

import com.coderedrobotics.dashboard.api.resources.RemoteBoolean;
import com.coderedrobotics.dashboard.api.resources.RemoteDouble;
import com.coderedrobotics.dashboard.api.resources.listeners.RemoteBooleanListener;
import com.coderedrobotics.dashboard.api.resources.listeners.RemoteDoubleListener;
import com.coderedrobotics.dashboard.communications.Connection;
import com.coderedrobotics.dashboard.communications.Subsocket;
import com.coderedrobotics.dashboard.communications.exceptions.InvalidRouteException;
import com.coderedrobotics.dashboard.communications.exceptions.NotMultiplexedException;
import com.coderedrobotics.dashboard.dashboard.Debug;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Michael
 */
public class MultiOverrideValueController extends javax.swing.JPanel implements RemoteDoubleListener {

    RemoteBoolean useOverride;
    RemoteDouble overrideValue;
    RemoteDouble originalValue;

    /**
     * Creates new form OverrideValue
     */
    public MultiOverrideValueController() {
        initComponents();
    }

    public void setOverrideValue(OverrideValue value) {
        useOverride = value.getUseOverride();
        overrideValue = value.getOverrideValue();
        originalValue = value.getOriginalValue();
        updateText(false);
    }

    @Override
    public void update(double value, RemoteDouble sender) {
        if (useOverride != null && originalValue != null) {
            if (!useOverride.getValue() && sender == originalValue) {
                Debug.println("UPDATE TEXT TO: " + value, Debug.EXTENDED);
                updateText(false);
            }
        }
    }

    private void updateText(boolean resultOfUser) {
        try {
            if ("".equals(jTextField1.getText())) {
                jTextField1.setText(String.valueOf(originalValue.getValue()));
            }
            double field = Double.parseDouble(jTextField1.getText());
            if (field == originalValue.getValue()) {
                try {
                    useOverride.setValue(false);
                    jTextField1.setForeground(Color.GRAY);
                } catch (RemoteBoolean.InvalidModeException ex) {
                    Logger.getLogger(MultiOverrideValueController.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (field != originalValue.getValue() && resultOfUser) {
                try {
                    overrideValue.setValue(Double.parseDouble(jTextField1.getText()));
                    useOverride.setValue(true);
                    jTextField1.setForeground(Color.BLACK);
                } catch (RemoteBoolean.InvalidModeException | RemoteDouble.InvalidModeException ex) {
                    Logger.getLogger(MultiOverrideValueController.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                jTextField1.setText(String.valueOf(originalValue.getValue()));
                jTextField1.setForeground(Color.GRAY);
            }
        } catch (NumberFormatException ex) {
            jTextField1.setText("");
            JOptionPane.showMessageDialog(null, "That is not a valid number.  ",
                    "Cannot Parse to Double", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        updateText(true);
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusGained
        try {
            if (Double.parseDouble(jTextField1.getText()) == originalValue.getValue()) {
                jTextField1.setText("");
            }
        } catch (NumberFormatException ex) {
            // not to worry, it's probably empty
        }
    }//GEN-LAST:event_jTextField1FocusGained

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        if ("".equals(jTextField1.getText())) {
            if (useOverride.getValue()) {
                jTextField1.setText(String.valueOf(overrideValue.getValue()));
            } else {
                jTextField1.setText(String.valueOf(originalValue.getValue()));
            }
        }
    }//GEN-LAST:event_jTextField1FocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    static class OverrideValue {

        private RemoteBoolean uo;
        private RemoteDouble ordv;
        private RemoteDouble orgv;

        public void setup(String subsocketPath, MultiOverrideValueController movc) {
            try {
                Subsocket root = Connection.getInstance().getRootSubsocket().enableMultiplexing();
                root.createNewRoute(subsocketPath).enableMultiplexing();
                uo = new RemoteBoolean(subsocketPath + ".use", false);
                ordv = new RemoteDouble(subsocketPath + ".override", 0);
                orgv = new RemoteDouble(subsocketPath + ".original", RemoteDouble.MODE.LOCAL);
                Debug.println("Original Value: " + orgv.getValue(), Debug.EXTENDED);
                orgv.addListener(movc);
                //updateText(false);
            } catch (NotMultiplexedException | InvalidRouteException e) {
                e.printStackTrace();
            }
        }

        public RemoteBoolean getUseOverride() {
            return uo;
        }

        public RemoteDouble getOverrideValue() {
            return ordv;
        }

        public RemoteDouble getOriginalValue() {
            return orgv;
        }
    }
}
